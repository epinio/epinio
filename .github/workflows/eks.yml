# Copyright Â© 2021 - 2023 SUSE LLC
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#     http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


name: EKS-CI

on:
  pull_request:
    branches: [ main ]
    types: [ ready_for_review ]
    paths:
      - 'acceptance/install/scenario4_test.go'
      - '.github/workflows/eks.yml'
  schedule:
    - cron:  '0 4 * * *'
  workflow_dispatch:
    inputs:
      keep_cluster:
        type: choice
        description: "Keep the cluster afterwards?"
        required: true
        default: 'Delete'
        options:
        - Delete
        - Keep

env:
  SETUP_GO_VERSION: '1.20.4'
  GOLANGCI_LINT_VERSION: v1.52
  GINKGO_NODES: 1
  FLAKE_ATTEMPTS: 1
  PUBLIC_CLOUD: 1
  KUBECONFIG: ${{ github.workspace }}/kubeconfig-epinio-ci
  EKS_REGION: ${{ secrets.EKS_REGION }}
  AWS_MACHINE_TYPE: 't3.xlarge'

jobs:
  linter:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Setup Go
        uses: actions/setup-go@v4
        timeout-minutes: 5
        with:
          cache: false
          go-version: ${{ env.SETUP_GO_VERSION }}

      - name: Cache Tools
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/tools
          key: ${{ runner.os }}-tools

      - name: Install Tools
        run: make tools-install

      - name: Add Tools to PATH
        run: |
          echo "`pwd`/output/bin" >> $GITHUB_PATH

      - name: Lint Epinio
        uses: golangci/golangci-lint-action@v3.4.0
        timeout-minutes: 10
        with:
          version: ${{ env.GOLANGCI_LINT_VERSION }}
          args: --timeout=10m --skip-files docs.go
          skip-cache: true

  acceptance-scenario4:
    needs:
      - linter
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v4
        timeout-minutes: 5
        with:
          go-version: ${{ env.SETUP_GO_VERSION }}

      - name: Setup Ginkgo Test Framework
        run: go install github.com/onsi/ginkgo/v2/ginkgo@v2.8.0

      - name: Install Dependencies
        run: |
          brew install kubernetes-cli helm coreutils

      - name: Install EKSCTL
        run: |
          # Better to always use the latest eksctl binary to avoid API version issue
          EKSCTL_GH=https://github.com/weaveworks/eksctl/releases/latest/download
          curl --location ${EKSCTL_GH}/eksctl_$(uname -s)_amd64.tar.gz | tar xz -C .
          chmod +x eksctl
          sudo mv eksctl /usr/local/bin

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2.0.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.EKS_REGION }}

      - name: Create EKS cluster
        id: create-cluster
        run: |
          id=$RANDOM
          echo "ID=$id" >> $GITHUB_OUTPUT
          echo "RUN_ID: $id"
          eksctl create cluster --name=epinio-ci$id \
          --region=${{ env.EKS_REGION }} \
          --nodes=2 \
          --node-type=${{ env.AWS_MACHINE_TYPE }} \
          --node-volume-size=40 \
          --managed \
          --kubeconfig=${{ env.KUBECONFIG }}

      - name: Configure EKS EBS CSI storage
        id: configure-storage
        run: |
          id=${{ steps.create-cluster.outputs.ID }}
          # Get AWS Account ID
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity | jq -r '.Account')
          # Assign OIDC provider to the cluster
          eksctl utils associate-iam-oidc-provider --cluster=epinio-ci$id --approve
          # Assign existing policy Amazon_EBS_CSI_Driver to the cluster's serviceAccount via a new Role
          eksctl create iamserviceaccount --cluster=epinio-ci$id \
            --name=ebs-csi-controller-sa \
            --namespace=kube-system \
            --attach-policy-arn=arn:aws:iam::$AWS_ACCOUNT_ID:policy/Amazon_EBS_CSI_Driver \
            --approve \
            --role-only \
            --role-name=AmazonEKS_epinio-ci$id-EBS_CSI_DriverRole
          # Install the driver addon and use the Role
          eksctl create addon --name=aws-ebs-csi-driver \
            --cluster=epinio-ci$id \
            --service-account-role-arn=arn:aws:iam::$AWS_ACCOUNT_ID:role/AmazonEKS_epinio-ci$id-EBS_CSI_DriverRole \
            --force

      - name: Installation Acceptance Tests
        env:
          REGEX: Scenario4
          REGISTRY_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          REGISTRY_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}
          AWS_ZONE_ID: ${{ secrets.AWS_ZONE_ID }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          # Use a random host name, so we don't collide with our workflows on EKS
          AWS_DOMAIN: id${{ steps.create-cluster.outputs.ID }}-${{ secrets.AWS_DOMAIN }}
          EPINIO_SYSTEM_DOMAIN: id${{ steps.create-cluster.outputs.ID }}-${{ secrets.AWS_DOMAIN }}
          EPINIO_TIMEOUT_MULTIPLIER: 3
          INGRESS_CONTROLLER: nginx
          # EXTRAENV_NAME: SESSION_KEY
          # EXTRAENV_VALUE: 12345
        run: |
          echo "System Domain: $AWS_DOMAIN"
          export KUBECONFIG=${{ env.KUBECONFIG }}
          make test-acceptance-install

      - name: Delete EKS cluster
        # We always tear down the cluster, to avoid costs. Except when running
        # manually and keep_cluster was set to "Keep"
        if: ${{ always() && github.event.inputs.keep_cluster != 'Keep' }}
        run: |
          export RUN_ID=${{ steps.create-cluster.outputs.ID }}
          export RUN_PCP="EKS"
          export AWS_ZONE_ID=${{ secrets.AWS_ZONE_ID }}
          export EKS_DOMAIN=${{ secrets.EKS_DOMAIN }}
          export EKS_REGION=${{ env.EKS_REGION }}
          export KUBECONFIG=${{ env.KUBECONFIG }}
          go run acceptance/helpers/delete_clusters/delete_clusters.go
