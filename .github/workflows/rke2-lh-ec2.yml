# Copyright Â© 2021 - 2023 SUSE LLC
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#     http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


name: RKE2-Longhorn-EC2-CI

on:
  pull_request:
    branches: [ main ]
    types: [ ready_for_review ]
    paths:
      - 'acceptance/install/scenario4_test.go'
      - '.github/workflows/rke2-lh-ec2.yml'
  schedule:
    - cron:  '0 2 * * *'
  workflow_dispatch:
    inputs:
      keep_cluster:
        description: "Keep the cluster afterwards? (empty/yes)"
        required: false
        default: ""

env:
  SETUP_GO_VERSION: '~1.19'
  GINKGO_NODES: 1
  FLAKE_ATTEMPTS: 1
  PUBLIC_CLOUD: 1
  AWS_REGION: eu-central-1

jobs:
  linter:
    runs-on: [self-hosted, epinio]

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.SETUP_GO_VERSION }}

      - name: Cache Tools
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/tools
          key: ${{ runner.os }}-tools

      - name: Install Tools
        run: make tools-install

      - name: Add Tools to PATH
        run: |
          echo "`pwd`/output/bin" >> $GITHUB_PATH

      - name: Lint Epinio
        run: make lint

      - name: Clean all
        if: always()
        uses: colpal/actions-clean@v1

  acceptance-scenario7:
    needs:
      - linter
    runs-on: [self-hosted, epinio]

    outputs:
      # Stores what's needed by another steps and jobs
      EC2_INSTANCE_IDS: ${{ steps.provision-ec2-instance.outputs.EC2_INSTANCE_IDS }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.SETUP_GO_VERSION }}

      - name: Setup Ginkgo Test Framework
        run: go install github.com/onsi/ginkgo/v2/ginkgo@v2.8.0

      - name: Cache Tools
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/tools
          key: ${{ runner.os }}-tools

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Install Dependencies
        run: |
          echo 'Install helm'
          wget -q https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 -O - | bash
          
          echo 'Install kuberlr/kubectl'
          whoami
          kuberlrUrl='https://github.com/flavio/kuberlr/releases/download/v0.4.2/kuberlr_0.4.2_linux_amd64.tar.gz'
          wget -q $kuberlrUrl -O - | sudo tar -xz -C /usr/local/bin --strip-components 1 --no-anchored kuberlr
          sudo ln -sf /usr/local/bin/kuberlr /usr/local/bin/kubectl
          
          echo 'Install AWS CLI'
          mkdir awscli_installer
          wget -q https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip -O awscli_installer/awscliv2.zip
          unzip -q awscli_installer/awscliv2.zip -d awscli_installer
          sudo awscli_installer/aws/install -u

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Provision EC2 instance
        id: provision-ec2-instance
        run: |
          id=$RANDOM
          echo "ID=$id" >> $GITHUB_OUTPUT
          aws ec2 run-instances \
            --launch-template='LaunchTemplateName=epinio-ci-sle15sp4-chost-template' \
            --no-cli-pager --region eu-central-1 --count 1 \
            --tag-specifications 'ResourceType=instance,Tags=[{Key=jobid,Value=epinio-ci'$id'}]'
          # Wait until the instance is 'running'
          aws ec2 wait instance-running  --filters Name=tag:jobid,Values=epinio-ci$id Name=instance-state-name,Values=running
          # Store instanceId for all related EC2 instances
          EC2_INSTANCE_IDS=$(aws ec2 describe-instances \
            --filters Name=tag:jobid,Values=epinio-ci$id \
            --query 'Reservations[*].Instances[*].InstanceId' \
            --output text)
          echo "EC2_INSTANCE_IDS=$EC2_INSTANCE_IDS" >> $GITHUB_OUTPUT
          echo $EC2_INSTANCE_IDS
          # Get the public IP for all instances

          # TODO DELETE aws ec2 terminate-instances --instance-ids i-0e755dc6a23f8783f

      - name: Deploy RKE2 over SSH
        run: |
          # curl -sfL https://get.rke2.io | sudo INSTALL_RKE2_METHOD=tar sh -
          # Allow non-root user to read KUBECONFIG file
          # sudo sh -c "echo RKE2_KUBECONFIG_MODE=0644 > /etc/sysconfig/rke2-server"
          # Disable RKE integrated ingress-nginx controller
          # sudo sh -c "mkdir -p /etc/rancher/rke2/config.yaml.d"
          # sudo sh -c "echo 'disable: rke2-ingress-nginx' > /etc/rancher/rke2/config.yaml.d/00-epinio.yaml"
          # Start RKE cluster
          #sudo systemctl enable --now rke2-server
          # Wait a "little" to let enough time for RKE cluster to be up and running
          sleep 120

      - name: Installation Acceptance Tests
        env:
          REGEX: Scenario3
          PUBLIC_CLOUD: 1
          KUBECONFIG: /etc/rancher/rke2/rke2.yaml
          REGISTRY_USERNAME: ${{ secrets.CFCIBOT_DOCKERHUB_USERNAME }}
          REGISTRY_PASSWORD: ${{ secrets.CFCIBOT_DOCKERHUB_PASSWORD }}
          INGRESS_CONTROLLER: traefik
          # EXTRAENV_NAME: SESSION_KEY
          # EXTRAENV_VALUE: 12345
        run: |
          # Get a free IP address on server's network
          export RANGE_IP="$(scripts/get-free-ip.sh)"
          export EPINIO_SYSTEM_DOMAIN="$(sed -e 's/-.*$//' <<< ${RANGE_IP}).omg.howdoi.website"
          make test-acceptance-install

      - name: Delete RKE cluster
        if: ${{ always() && !github.event.inputs.keep_cluster }}
        run: |
          sudo sh /usr/local/bin/rke2-uninstall.sh

      # Only on RKE, as it uses a self-hosted runner
      - name: Clean all
        if: always()
        uses: colpal/actions-clean@v1
