// Copyright Â© 2021 - 2023 SUSE LLC
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//     http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by counterfeiter. DO NOT EDIT.
package cmdfakes

import (
	"context"
	"sync"

	"github.com/epinio/epinio/internal/cli/cmd"
	"github.com/epinio/epinio/internal/cli/usercmd"
)

type FakeAppenvService struct {
	AppsMatchingStub        func(string) []string
	appsMatchingMutex       sync.RWMutex
	appsMatchingArgsForCall []struct {
		arg1 string
	}
	appsMatchingReturns struct {
		result1 []string
	}
	appsMatchingReturnsOnCall map[int]struct {
		result1 []string
	}
	EnvListStub        func(context.Context, string) error
	envListMutex       sync.RWMutex
	envListArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	envListReturns struct {
		result1 error
	}
	envListReturnsOnCall map[int]struct {
		result1 error
	}
	EnvMatchingStub        func(context.Context, string, string) []string
	envMatchingMutex       sync.RWMutex
	envMatchingArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	envMatchingReturns struct {
		result1 []string
	}
	envMatchingReturnsOnCall map[int]struct {
		result1 []string
	}
	EnvSetStub        func(context.Context, string, string, string) error
	envSetMutex       sync.RWMutex
	envSetArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
	}
	envSetReturns struct {
		result1 error
	}
	envSetReturnsOnCall map[int]struct {
		result1 error
	}
	EnvShowStub        func(context.Context, string, string) error
	envShowMutex       sync.RWMutex
	envShowArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	envShowReturns struct {
		result1 error
	}
	envShowReturnsOnCall map[int]struct {
		result1 error
	}
	EnvUnsetStub        func(context.Context, string, string) error
	envUnsetMutex       sync.RWMutex
	envUnsetArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	envUnsetReturns struct {
		result1 error
	}
	envUnsetReturnsOnCall map[int]struct {
		result1 error
	}
	GetAPIStub        func() usercmd.APIClient
	getAPIMutex       sync.RWMutex
	getAPIArgsForCall []struct {
	}
	getAPIReturns struct {
		result1 usercmd.APIClient
	}
	getAPIReturnsOnCall map[int]struct {
		result1 usercmd.APIClient
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAppenvService) AppsMatching(arg1 string) []string {
	fake.appsMatchingMutex.Lock()
	ret, specificReturn := fake.appsMatchingReturnsOnCall[len(fake.appsMatchingArgsForCall)]
	fake.appsMatchingArgsForCall = append(fake.appsMatchingArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.AppsMatchingStub
	fakeReturns := fake.appsMatchingReturns
	fake.recordInvocation("AppsMatching", []interface{}{arg1})
	fake.appsMatchingMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeAppenvService) AppsMatchingCallCount() int {
	fake.appsMatchingMutex.RLock()
	defer fake.appsMatchingMutex.RUnlock()
	return len(fake.appsMatchingArgsForCall)
}

func (fake *FakeAppenvService) AppsMatchingCalls(stub func(string) []string) {
	fake.appsMatchingMutex.Lock()
	defer fake.appsMatchingMutex.Unlock()
	fake.AppsMatchingStub = stub
}

func (fake *FakeAppenvService) AppsMatchingArgsForCall(i int) string {
	fake.appsMatchingMutex.RLock()
	defer fake.appsMatchingMutex.RUnlock()
	argsForCall := fake.appsMatchingArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeAppenvService) AppsMatchingReturns(result1 []string) {
	fake.appsMatchingMutex.Lock()
	defer fake.appsMatchingMutex.Unlock()
	fake.AppsMatchingStub = nil
	fake.appsMatchingReturns = struct {
		result1 []string
	}{result1}
}

func (fake *FakeAppenvService) AppsMatchingReturnsOnCall(i int, result1 []string) {
	fake.appsMatchingMutex.Lock()
	defer fake.appsMatchingMutex.Unlock()
	fake.AppsMatchingStub = nil
	if fake.appsMatchingReturnsOnCall == nil {
		fake.appsMatchingReturnsOnCall = make(map[int]struct {
			result1 []string
		})
	}
	fake.appsMatchingReturnsOnCall[i] = struct {
		result1 []string
	}{result1}
}

func (fake *FakeAppenvService) EnvList(arg1 context.Context, arg2 string) error {
	fake.envListMutex.Lock()
	ret, specificReturn := fake.envListReturnsOnCall[len(fake.envListArgsForCall)]
	fake.envListArgsForCall = append(fake.envListArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.EnvListStub
	fakeReturns := fake.envListReturns
	fake.recordInvocation("EnvList", []interface{}{arg1, arg2})
	fake.envListMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeAppenvService) EnvListCallCount() int {
	fake.envListMutex.RLock()
	defer fake.envListMutex.RUnlock()
	return len(fake.envListArgsForCall)
}

func (fake *FakeAppenvService) EnvListCalls(stub func(context.Context, string) error) {
	fake.envListMutex.Lock()
	defer fake.envListMutex.Unlock()
	fake.EnvListStub = stub
}

func (fake *FakeAppenvService) EnvListArgsForCall(i int) (context.Context, string) {
	fake.envListMutex.RLock()
	defer fake.envListMutex.RUnlock()
	argsForCall := fake.envListArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAppenvService) EnvListReturns(result1 error) {
	fake.envListMutex.Lock()
	defer fake.envListMutex.Unlock()
	fake.EnvListStub = nil
	fake.envListReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAppenvService) EnvListReturnsOnCall(i int, result1 error) {
	fake.envListMutex.Lock()
	defer fake.envListMutex.Unlock()
	fake.EnvListStub = nil
	if fake.envListReturnsOnCall == nil {
		fake.envListReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.envListReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeAppenvService) EnvMatching(arg1 context.Context, arg2 string, arg3 string) []string {
	fake.envMatchingMutex.Lock()
	ret, specificReturn := fake.envMatchingReturnsOnCall[len(fake.envMatchingArgsForCall)]
	fake.envMatchingArgsForCall = append(fake.envMatchingArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.EnvMatchingStub
	fakeReturns := fake.envMatchingReturns
	fake.recordInvocation("EnvMatching", []interface{}{arg1, arg2, arg3})
	fake.envMatchingMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeAppenvService) EnvMatchingCallCount() int {
	fake.envMatchingMutex.RLock()
	defer fake.envMatchingMutex.RUnlock()
	return len(fake.envMatchingArgsForCall)
}

func (fake *FakeAppenvService) EnvMatchingCalls(stub func(context.Context, string, string) []string) {
	fake.envMatchingMutex.Lock()
	defer fake.envMatchingMutex.Unlock()
	fake.EnvMatchingStub = stub
}

func (fake *FakeAppenvService) EnvMatchingArgsForCall(i int) (context.Context, string, string) {
	fake.envMatchingMutex.RLock()
	defer fake.envMatchingMutex.RUnlock()
	argsForCall := fake.envMatchingArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeAppenvService) EnvMatchingReturns(result1 []string) {
	fake.envMatchingMutex.Lock()
	defer fake.envMatchingMutex.Unlock()
	fake.EnvMatchingStub = nil
	fake.envMatchingReturns = struct {
		result1 []string
	}{result1}
}

func (fake *FakeAppenvService) EnvMatchingReturnsOnCall(i int, result1 []string) {
	fake.envMatchingMutex.Lock()
	defer fake.envMatchingMutex.Unlock()
	fake.EnvMatchingStub = nil
	if fake.envMatchingReturnsOnCall == nil {
		fake.envMatchingReturnsOnCall = make(map[int]struct {
			result1 []string
		})
	}
	fake.envMatchingReturnsOnCall[i] = struct {
		result1 []string
	}{result1}
}

func (fake *FakeAppenvService) EnvSet(arg1 context.Context, arg2 string, arg3 string, arg4 string) error {
	fake.envSetMutex.Lock()
	ret, specificReturn := fake.envSetReturnsOnCall[len(fake.envSetArgsForCall)]
	fake.envSetArgsForCall = append(fake.envSetArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.EnvSetStub
	fakeReturns := fake.envSetReturns
	fake.recordInvocation("EnvSet", []interface{}{arg1, arg2, arg3, arg4})
	fake.envSetMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeAppenvService) EnvSetCallCount() int {
	fake.envSetMutex.RLock()
	defer fake.envSetMutex.RUnlock()
	return len(fake.envSetArgsForCall)
}

func (fake *FakeAppenvService) EnvSetCalls(stub func(context.Context, string, string, string) error) {
	fake.envSetMutex.Lock()
	defer fake.envSetMutex.Unlock()
	fake.EnvSetStub = stub
}

func (fake *FakeAppenvService) EnvSetArgsForCall(i int) (context.Context, string, string, string) {
	fake.envSetMutex.RLock()
	defer fake.envSetMutex.RUnlock()
	argsForCall := fake.envSetArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeAppenvService) EnvSetReturns(result1 error) {
	fake.envSetMutex.Lock()
	defer fake.envSetMutex.Unlock()
	fake.EnvSetStub = nil
	fake.envSetReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAppenvService) EnvSetReturnsOnCall(i int, result1 error) {
	fake.envSetMutex.Lock()
	defer fake.envSetMutex.Unlock()
	fake.EnvSetStub = nil
	if fake.envSetReturnsOnCall == nil {
		fake.envSetReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.envSetReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeAppenvService) EnvShow(arg1 context.Context, arg2 string, arg3 string) error {
	fake.envShowMutex.Lock()
	ret, specificReturn := fake.envShowReturnsOnCall[len(fake.envShowArgsForCall)]
	fake.envShowArgsForCall = append(fake.envShowArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.EnvShowStub
	fakeReturns := fake.envShowReturns
	fake.recordInvocation("EnvShow", []interface{}{arg1, arg2, arg3})
	fake.envShowMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeAppenvService) EnvShowCallCount() int {
	fake.envShowMutex.RLock()
	defer fake.envShowMutex.RUnlock()
	return len(fake.envShowArgsForCall)
}

func (fake *FakeAppenvService) EnvShowCalls(stub func(context.Context, string, string) error) {
	fake.envShowMutex.Lock()
	defer fake.envShowMutex.Unlock()
	fake.EnvShowStub = stub
}

func (fake *FakeAppenvService) EnvShowArgsForCall(i int) (context.Context, string, string) {
	fake.envShowMutex.RLock()
	defer fake.envShowMutex.RUnlock()
	argsForCall := fake.envShowArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeAppenvService) EnvShowReturns(result1 error) {
	fake.envShowMutex.Lock()
	defer fake.envShowMutex.Unlock()
	fake.EnvShowStub = nil
	fake.envShowReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAppenvService) EnvShowReturnsOnCall(i int, result1 error) {
	fake.envShowMutex.Lock()
	defer fake.envShowMutex.Unlock()
	fake.EnvShowStub = nil
	if fake.envShowReturnsOnCall == nil {
		fake.envShowReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.envShowReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeAppenvService) EnvUnset(arg1 context.Context, arg2 string, arg3 string) error {
	fake.envUnsetMutex.Lock()
	ret, specificReturn := fake.envUnsetReturnsOnCall[len(fake.envUnsetArgsForCall)]
	fake.envUnsetArgsForCall = append(fake.envUnsetArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.EnvUnsetStub
	fakeReturns := fake.envUnsetReturns
	fake.recordInvocation("EnvUnset", []interface{}{arg1, arg2, arg3})
	fake.envUnsetMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeAppenvService) EnvUnsetCallCount() int {
	fake.envUnsetMutex.RLock()
	defer fake.envUnsetMutex.RUnlock()
	return len(fake.envUnsetArgsForCall)
}

func (fake *FakeAppenvService) EnvUnsetCalls(stub func(context.Context, string, string) error) {
	fake.envUnsetMutex.Lock()
	defer fake.envUnsetMutex.Unlock()
	fake.EnvUnsetStub = stub
}

func (fake *FakeAppenvService) EnvUnsetArgsForCall(i int) (context.Context, string, string) {
	fake.envUnsetMutex.RLock()
	defer fake.envUnsetMutex.RUnlock()
	argsForCall := fake.envUnsetArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeAppenvService) EnvUnsetReturns(result1 error) {
	fake.envUnsetMutex.Lock()
	defer fake.envUnsetMutex.Unlock()
	fake.EnvUnsetStub = nil
	fake.envUnsetReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAppenvService) EnvUnsetReturnsOnCall(i int, result1 error) {
	fake.envUnsetMutex.Lock()
	defer fake.envUnsetMutex.Unlock()
	fake.EnvUnsetStub = nil
	if fake.envUnsetReturnsOnCall == nil {
		fake.envUnsetReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.envUnsetReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeAppenvService) GetAPI() usercmd.APIClient {
	fake.getAPIMutex.Lock()
	ret, specificReturn := fake.getAPIReturnsOnCall[len(fake.getAPIArgsForCall)]
	fake.getAPIArgsForCall = append(fake.getAPIArgsForCall, struct {
	}{})
	stub := fake.GetAPIStub
	fakeReturns := fake.getAPIReturns
	fake.recordInvocation("GetAPI", []interface{}{})
	fake.getAPIMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeAppenvService) GetAPICallCount() int {
	fake.getAPIMutex.RLock()
	defer fake.getAPIMutex.RUnlock()
	return len(fake.getAPIArgsForCall)
}

func (fake *FakeAppenvService) GetAPICalls(stub func() usercmd.APIClient) {
	fake.getAPIMutex.Lock()
	defer fake.getAPIMutex.Unlock()
	fake.GetAPIStub = stub
}

func (fake *FakeAppenvService) GetAPIReturns(result1 usercmd.APIClient) {
	fake.getAPIMutex.Lock()
	defer fake.getAPIMutex.Unlock()
	fake.GetAPIStub = nil
	fake.getAPIReturns = struct {
		result1 usercmd.APIClient
	}{result1}
}

func (fake *FakeAppenvService) GetAPIReturnsOnCall(i int, result1 usercmd.APIClient) {
	fake.getAPIMutex.Lock()
	defer fake.getAPIMutex.Unlock()
	fake.GetAPIStub = nil
	if fake.getAPIReturnsOnCall == nil {
		fake.getAPIReturnsOnCall = make(map[int]struct {
			result1 usercmd.APIClient
		})
	}
	fake.getAPIReturnsOnCall[i] = struct {
		result1 usercmd.APIClient
	}{result1}
}

func (fake *FakeAppenvService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.appsMatchingMutex.RLock()
	defer fake.appsMatchingMutex.RUnlock()
	fake.envListMutex.RLock()
	defer fake.envListMutex.RUnlock()
	fake.envMatchingMutex.RLock()
	defer fake.envMatchingMutex.RUnlock()
	fake.envSetMutex.RLock()
	defer fake.envSetMutex.RUnlock()
	fake.envShowMutex.RLock()
	defer fake.envShowMutex.RUnlock()
	fake.envUnsetMutex.RLock()
	defer fake.envUnsetMutex.RUnlock()
	fake.getAPIMutex.RLock()
	defer fake.getAPIMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAppenvService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cmd.AppenvService = new(FakeAppenvService)
