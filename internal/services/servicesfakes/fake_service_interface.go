// Code generated by counterfeiter. DO NOT EDIT.
package servicesfakes

import (
	"context"
	"sync"

	v1a "k8s.io/api/core/v1"
	v1c "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/apimachinery/pkg/watch"
	v1b "k8s.io/client-go/applyconfigurations/core/v1"
	v1 "k8s.io/client-go/kubernetes/typed/core/v1"
	"k8s.io/client-go/rest"
)

type FakeServiceInterface struct {
	ApplyStub        func(context.Context, *v1b.ServiceApplyConfiguration, v1c.ApplyOptions) (*v1a.Service, error)
	applyMutex       sync.RWMutex
	applyArgsForCall []struct {
		arg1 context.Context
		arg2 *v1b.ServiceApplyConfiguration
		arg3 v1c.ApplyOptions
	}
	applyReturns struct {
		result1 *v1a.Service
		result2 error
	}
	applyReturnsOnCall map[int]struct {
		result1 *v1a.Service
		result2 error
	}
	ApplyStatusStub        func(context.Context, *v1b.ServiceApplyConfiguration, v1c.ApplyOptions) (*v1a.Service, error)
	applyStatusMutex       sync.RWMutex
	applyStatusArgsForCall []struct {
		arg1 context.Context
		arg2 *v1b.ServiceApplyConfiguration
		arg3 v1c.ApplyOptions
	}
	applyStatusReturns struct {
		result1 *v1a.Service
		result2 error
	}
	applyStatusReturnsOnCall map[int]struct {
		result1 *v1a.Service
		result2 error
	}
	CreateStub        func(context.Context, *v1a.Service, v1c.CreateOptions) (*v1a.Service, error)
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		arg1 context.Context
		arg2 *v1a.Service
		arg3 v1c.CreateOptions
	}
	createReturns struct {
		result1 *v1a.Service
		result2 error
	}
	createReturnsOnCall map[int]struct {
		result1 *v1a.Service
		result2 error
	}
	DeleteStub        func(context.Context, string, v1c.DeleteOptions) error
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 v1c.DeleteOptions
	}
	deleteReturns struct {
		result1 error
	}
	deleteReturnsOnCall map[int]struct {
		result1 error
	}
	GetStub        func(context.Context, string, v1c.GetOptions) (*v1a.Service, error)
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 v1c.GetOptions
	}
	getReturns struct {
		result1 *v1a.Service
		result2 error
	}
	getReturnsOnCall map[int]struct {
		result1 *v1a.Service
		result2 error
	}
	ListStub        func(context.Context, v1c.ListOptions) (*v1a.ServiceList, error)
	listMutex       sync.RWMutex
	listArgsForCall []struct {
		arg1 context.Context
		arg2 v1c.ListOptions
	}
	listReturns struct {
		result1 *v1a.ServiceList
		result2 error
	}
	listReturnsOnCall map[int]struct {
		result1 *v1a.ServiceList
		result2 error
	}
	PatchStub        func(context.Context, string, types.PatchType, []byte, v1c.PatchOptions, ...string) (*v1a.Service, error)
	patchMutex       sync.RWMutex
	patchArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 types.PatchType
		arg4 []byte
		arg5 v1c.PatchOptions
		arg6 []string
	}
	patchReturns struct {
		result1 *v1a.Service
		result2 error
	}
	patchReturnsOnCall map[int]struct {
		result1 *v1a.Service
		result2 error
	}
	ProxyGetStub        func(string, string, string, string, map[string]string) rest.ResponseWrapper
	proxyGetMutex       sync.RWMutex
	proxyGetArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 string
		arg5 map[string]string
	}
	proxyGetReturns struct {
		result1 rest.ResponseWrapper
	}
	proxyGetReturnsOnCall map[int]struct {
		result1 rest.ResponseWrapper
	}
	UpdateStub        func(context.Context, *v1a.Service, v1c.UpdateOptions) (*v1a.Service, error)
	updateMutex       sync.RWMutex
	updateArgsForCall []struct {
		arg1 context.Context
		arg2 *v1a.Service
		arg3 v1c.UpdateOptions
	}
	updateReturns struct {
		result1 *v1a.Service
		result2 error
	}
	updateReturnsOnCall map[int]struct {
		result1 *v1a.Service
		result2 error
	}
	UpdateStatusStub        func(context.Context, *v1a.Service, v1c.UpdateOptions) (*v1a.Service, error)
	updateStatusMutex       sync.RWMutex
	updateStatusArgsForCall []struct {
		arg1 context.Context
		arg2 *v1a.Service
		arg3 v1c.UpdateOptions
	}
	updateStatusReturns struct {
		result1 *v1a.Service
		result2 error
	}
	updateStatusReturnsOnCall map[int]struct {
		result1 *v1a.Service
		result2 error
	}
	WatchStub        func(context.Context, v1c.ListOptions) (watch.Interface, error)
	watchMutex       sync.RWMutex
	watchArgsForCall []struct {
		arg1 context.Context
		arg2 v1c.ListOptions
	}
	watchReturns struct {
		result1 watch.Interface
		result2 error
	}
	watchReturnsOnCall map[int]struct {
		result1 watch.Interface
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeServiceInterface) Apply(arg1 context.Context, arg2 *v1b.ServiceApplyConfiguration, arg3 v1c.ApplyOptions) (*v1a.Service, error) {
	fake.applyMutex.Lock()
	ret, specificReturn := fake.applyReturnsOnCall[len(fake.applyArgsForCall)]
	fake.applyArgsForCall = append(fake.applyArgsForCall, struct {
		arg1 context.Context
		arg2 *v1b.ServiceApplyConfiguration
		arg3 v1c.ApplyOptions
	}{arg1, arg2, arg3})
	stub := fake.ApplyStub
	fakeReturns := fake.applyReturns
	fake.recordInvocation("Apply", []interface{}{arg1, arg2, arg3})
	fake.applyMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceInterface) ApplyCallCount() int {
	fake.applyMutex.RLock()
	defer fake.applyMutex.RUnlock()
	return len(fake.applyArgsForCall)
}

func (fake *FakeServiceInterface) ApplyCalls(stub func(context.Context, *v1b.ServiceApplyConfiguration, v1c.ApplyOptions) (*v1a.Service, error)) {
	fake.applyMutex.Lock()
	defer fake.applyMutex.Unlock()
	fake.ApplyStub = stub
}

func (fake *FakeServiceInterface) ApplyArgsForCall(i int) (context.Context, *v1b.ServiceApplyConfiguration, v1c.ApplyOptions) {
	fake.applyMutex.RLock()
	defer fake.applyMutex.RUnlock()
	argsForCall := fake.applyArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeServiceInterface) ApplyReturns(result1 *v1a.Service, result2 error) {
	fake.applyMutex.Lock()
	defer fake.applyMutex.Unlock()
	fake.ApplyStub = nil
	fake.applyReturns = struct {
		result1 *v1a.Service
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceInterface) ApplyReturnsOnCall(i int, result1 *v1a.Service, result2 error) {
	fake.applyMutex.Lock()
	defer fake.applyMutex.Unlock()
	fake.ApplyStub = nil
	if fake.applyReturnsOnCall == nil {
		fake.applyReturnsOnCall = make(map[int]struct {
			result1 *v1a.Service
			result2 error
		})
	}
	fake.applyReturnsOnCall[i] = struct {
		result1 *v1a.Service
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceInterface) ApplyStatus(arg1 context.Context, arg2 *v1b.ServiceApplyConfiguration, arg3 v1c.ApplyOptions) (*v1a.Service, error) {
	fake.applyStatusMutex.Lock()
	ret, specificReturn := fake.applyStatusReturnsOnCall[len(fake.applyStatusArgsForCall)]
	fake.applyStatusArgsForCall = append(fake.applyStatusArgsForCall, struct {
		arg1 context.Context
		arg2 *v1b.ServiceApplyConfiguration
		arg3 v1c.ApplyOptions
	}{arg1, arg2, arg3})
	stub := fake.ApplyStatusStub
	fakeReturns := fake.applyStatusReturns
	fake.recordInvocation("ApplyStatus", []interface{}{arg1, arg2, arg3})
	fake.applyStatusMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceInterface) ApplyStatusCallCount() int {
	fake.applyStatusMutex.RLock()
	defer fake.applyStatusMutex.RUnlock()
	return len(fake.applyStatusArgsForCall)
}

func (fake *FakeServiceInterface) ApplyStatusCalls(stub func(context.Context, *v1b.ServiceApplyConfiguration, v1c.ApplyOptions) (*v1a.Service, error)) {
	fake.applyStatusMutex.Lock()
	defer fake.applyStatusMutex.Unlock()
	fake.ApplyStatusStub = stub
}

func (fake *FakeServiceInterface) ApplyStatusArgsForCall(i int) (context.Context, *v1b.ServiceApplyConfiguration, v1c.ApplyOptions) {
	fake.applyStatusMutex.RLock()
	defer fake.applyStatusMutex.RUnlock()
	argsForCall := fake.applyStatusArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeServiceInterface) ApplyStatusReturns(result1 *v1a.Service, result2 error) {
	fake.applyStatusMutex.Lock()
	defer fake.applyStatusMutex.Unlock()
	fake.ApplyStatusStub = nil
	fake.applyStatusReturns = struct {
		result1 *v1a.Service
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceInterface) ApplyStatusReturnsOnCall(i int, result1 *v1a.Service, result2 error) {
	fake.applyStatusMutex.Lock()
	defer fake.applyStatusMutex.Unlock()
	fake.ApplyStatusStub = nil
	if fake.applyStatusReturnsOnCall == nil {
		fake.applyStatusReturnsOnCall = make(map[int]struct {
			result1 *v1a.Service
			result2 error
		})
	}
	fake.applyStatusReturnsOnCall[i] = struct {
		result1 *v1a.Service
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceInterface) Create(arg1 context.Context, arg2 *v1a.Service, arg3 v1c.CreateOptions) (*v1a.Service, error) {
	fake.createMutex.Lock()
	ret, specificReturn := fake.createReturnsOnCall[len(fake.createArgsForCall)]
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		arg1 context.Context
		arg2 *v1a.Service
		arg3 v1c.CreateOptions
	}{arg1, arg2, arg3})
	stub := fake.CreateStub
	fakeReturns := fake.createReturns
	fake.recordInvocation("Create", []interface{}{arg1, arg2, arg3})
	fake.createMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceInterface) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeServiceInterface) CreateCalls(stub func(context.Context, *v1a.Service, v1c.CreateOptions) (*v1a.Service, error)) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = stub
}

func (fake *FakeServiceInterface) CreateArgsForCall(i int) (context.Context, *v1a.Service, v1c.CreateOptions) {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	argsForCall := fake.createArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeServiceInterface) CreateReturns(result1 *v1a.Service, result2 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 *v1a.Service
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceInterface) CreateReturnsOnCall(i int, result1 *v1a.Service, result2 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	if fake.createReturnsOnCall == nil {
		fake.createReturnsOnCall = make(map[int]struct {
			result1 *v1a.Service
			result2 error
		})
	}
	fake.createReturnsOnCall[i] = struct {
		result1 *v1a.Service
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceInterface) Delete(arg1 context.Context, arg2 string, arg3 v1c.DeleteOptions) error {
	fake.deleteMutex.Lock()
	ret, specificReturn := fake.deleteReturnsOnCall[len(fake.deleteArgsForCall)]
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 v1c.DeleteOptions
	}{arg1, arg2, arg3})
	stub := fake.DeleteStub
	fakeReturns := fake.deleteReturns
	fake.recordInvocation("Delete", []interface{}{arg1, arg2, arg3})
	fake.deleteMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeServiceInterface) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *FakeServiceInterface) DeleteCalls(stub func(context.Context, string, v1c.DeleteOptions) error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = stub
}

func (fake *FakeServiceInterface) DeleteArgsForCall(i int) (context.Context, string, v1c.DeleteOptions) {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	argsForCall := fake.deleteArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeServiceInterface) DeleteReturns(result1 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeServiceInterface) DeleteReturnsOnCall(i int, result1 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	if fake.deleteReturnsOnCall == nil {
		fake.deleteReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeServiceInterface) Get(arg1 context.Context, arg2 string, arg3 v1c.GetOptions) (*v1a.Service, error) {
	fake.getMutex.Lock()
	ret, specificReturn := fake.getReturnsOnCall[len(fake.getArgsForCall)]
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 v1c.GetOptions
	}{arg1, arg2, arg3})
	stub := fake.GetStub
	fakeReturns := fake.getReturns
	fake.recordInvocation("Get", []interface{}{arg1, arg2, arg3})
	fake.getMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceInterface) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *FakeServiceInterface) GetCalls(stub func(context.Context, string, v1c.GetOptions) (*v1a.Service, error)) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = stub
}

func (fake *FakeServiceInterface) GetArgsForCall(i int) (context.Context, string, v1c.GetOptions) {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	argsForCall := fake.getArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeServiceInterface) GetReturns(result1 *v1a.Service, result2 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 *v1a.Service
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceInterface) GetReturnsOnCall(i int, result1 *v1a.Service, result2 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	if fake.getReturnsOnCall == nil {
		fake.getReturnsOnCall = make(map[int]struct {
			result1 *v1a.Service
			result2 error
		})
	}
	fake.getReturnsOnCall[i] = struct {
		result1 *v1a.Service
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceInterface) List(arg1 context.Context, arg2 v1c.ListOptions) (*v1a.ServiceList, error) {
	fake.listMutex.Lock()
	ret, specificReturn := fake.listReturnsOnCall[len(fake.listArgsForCall)]
	fake.listArgsForCall = append(fake.listArgsForCall, struct {
		arg1 context.Context
		arg2 v1c.ListOptions
	}{arg1, arg2})
	stub := fake.ListStub
	fakeReturns := fake.listReturns
	fake.recordInvocation("List", []interface{}{arg1, arg2})
	fake.listMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceInterface) ListCallCount() int {
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	return len(fake.listArgsForCall)
}

func (fake *FakeServiceInterface) ListCalls(stub func(context.Context, v1c.ListOptions) (*v1a.ServiceList, error)) {
	fake.listMutex.Lock()
	defer fake.listMutex.Unlock()
	fake.ListStub = stub
}

func (fake *FakeServiceInterface) ListArgsForCall(i int) (context.Context, v1c.ListOptions) {
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	argsForCall := fake.listArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeServiceInterface) ListReturns(result1 *v1a.ServiceList, result2 error) {
	fake.listMutex.Lock()
	defer fake.listMutex.Unlock()
	fake.ListStub = nil
	fake.listReturns = struct {
		result1 *v1a.ServiceList
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceInterface) ListReturnsOnCall(i int, result1 *v1a.ServiceList, result2 error) {
	fake.listMutex.Lock()
	defer fake.listMutex.Unlock()
	fake.ListStub = nil
	if fake.listReturnsOnCall == nil {
		fake.listReturnsOnCall = make(map[int]struct {
			result1 *v1a.ServiceList
			result2 error
		})
	}
	fake.listReturnsOnCall[i] = struct {
		result1 *v1a.ServiceList
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceInterface) Patch(arg1 context.Context, arg2 string, arg3 types.PatchType, arg4 []byte, arg5 v1c.PatchOptions, arg6 ...string) (*v1a.Service, error) {
	var arg4Copy []byte
	if arg4 != nil {
		arg4Copy = make([]byte, len(arg4))
		copy(arg4Copy, arg4)
	}
	fake.patchMutex.Lock()
	ret, specificReturn := fake.patchReturnsOnCall[len(fake.patchArgsForCall)]
	fake.patchArgsForCall = append(fake.patchArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 types.PatchType
		arg4 []byte
		arg5 v1c.PatchOptions
		arg6 []string
	}{arg1, arg2, arg3, arg4Copy, arg5, arg6})
	stub := fake.PatchStub
	fakeReturns := fake.patchReturns
	fake.recordInvocation("Patch", []interface{}{arg1, arg2, arg3, arg4Copy, arg5, arg6})
	fake.patchMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5, arg6...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceInterface) PatchCallCount() int {
	fake.patchMutex.RLock()
	defer fake.patchMutex.RUnlock()
	return len(fake.patchArgsForCall)
}

func (fake *FakeServiceInterface) PatchCalls(stub func(context.Context, string, types.PatchType, []byte, v1c.PatchOptions, ...string) (*v1a.Service, error)) {
	fake.patchMutex.Lock()
	defer fake.patchMutex.Unlock()
	fake.PatchStub = stub
}

func (fake *FakeServiceInterface) PatchArgsForCall(i int) (context.Context, string, types.PatchType, []byte, v1c.PatchOptions, []string) {
	fake.patchMutex.RLock()
	defer fake.patchMutex.RUnlock()
	argsForCall := fake.patchArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5, argsForCall.arg6
}

func (fake *FakeServiceInterface) PatchReturns(result1 *v1a.Service, result2 error) {
	fake.patchMutex.Lock()
	defer fake.patchMutex.Unlock()
	fake.PatchStub = nil
	fake.patchReturns = struct {
		result1 *v1a.Service
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceInterface) PatchReturnsOnCall(i int, result1 *v1a.Service, result2 error) {
	fake.patchMutex.Lock()
	defer fake.patchMutex.Unlock()
	fake.PatchStub = nil
	if fake.patchReturnsOnCall == nil {
		fake.patchReturnsOnCall = make(map[int]struct {
			result1 *v1a.Service
			result2 error
		})
	}
	fake.patchReturnsOnCall[i] = struct {
		result1 *v1a.Service
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceInterface) ProxyGet(arg1 string, arg2 string, arg3 string, arg4 string, arg5 map[string]string) rest.ResponseWrapper {
	fake.proxyGetMutex.Lock()
	ret, specificReturn := fake.proxyGetReturnsOnCall[len(fake.proxyGetArgsForCall)]
	fake.proxyGetArgsForCall = append(fake.proxyGetArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 string
		arg5 map[string]string
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.ProxyGetStub
	fakeReturns := fake.proxyGetReturns
	fake.recordInvocation("ProxyGet", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.proxyGetMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeServiceInterface) ProxyGetCallCount() int {
	fake.proxyGetMutex.RLock()
	defer fake.proxyGetMutex.RUnlock()
	return len(fake.proxyGetArgsForCall)
}

func (fake *FakeServiceInterface) ProxyGetCalls(stub func(string, string, string, string, map[string]string) rest.ResponseWrapper) {
	fake.proxyGetMutex.Lock()
	defer fake.proxyGetMutex.Unlock()
	fake.ProxyGetStub = stub
}

func (fake *FakeServiceInterface) ProxyGetArgsForCall(i int) (string, string, string, string, map[string]string) {
	fake.proxyGetMutex.RLock()
	defer fake.proxyGetMutex.RUnlock()
	argsForCall := fake.proxyGetArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeServiceInterface) ProxyGetReturns(result1 rest.ResponseWrapper) {
	fake.proxyGetMutex.Lock()
	defer fake.proxyGetMutex.Unlock()
	fake.ProxyGetStub = nil
	fake.proxyGetReturns = struct {
		result1 rest.ResponseWrapper
	}{result1}
}

func (fake *FakeServiceInterface) ProxyGetReturnsOnCall(i int, result1 rest.ResponseWrapper) {
	fake.proxyGetMutex.Lock()
	defer fake.proxyGetMutex.Unlock()
	fake.ProxyGetStub = nil
	if fake.proxyGetReturnsOnCall == nil {
		fake.proxyGetReturnsOnCall = make(map[int]struct {
			result1 rest.ResponseWrapper
		})
	}
	fake.proxyGetReturnsOnCall[i] = struct {
		result1 rest.ResponseWrapper
	}{result1}
}

func (fake *FakeServiceInterface) Update(arg1 context.Context, arg2 *v1a.Service, arg3 v1c.UpdateOptions) (*v1a.Service, error) {
	fake.updateMutex.Lock()
	ret, specificReturn := fake.updateReturnsOnCall[len(fake.updateArgsForCall)]
	fake.updateArgsForCall = append(fake.updateArgsForCall, struct {
		arg1 context.Context
		arg2 *v1a.Service
		arg3 v1c.UpdateOptions
	}{arg1, arg2, arg3})
	stub := fake.UpdateStub
	fakeReturns := fake.updateReturns
	fake.recordInvocation("Update", []interface{}{arg1, arg2, arg3})
	fake.updateMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceInterface) UpdateCallCount() int {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return len(fake.updateArgsForCall)
}

func (fake *FakeServiceInterface) UpdateCalls(stub func(context.Context, *v1a.Service, v1c.UpdateOptions) (*v1a.Service, error)) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = stub
}

func (fake *FakeServiceInterface) UpdateArgsForCall(i int) (context.Context, *v1a.Service, v1c.UpdateOptions) {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	argsForCall := fake.updateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeServiceInterface) UpdateReturns(result1 *v1a.Service, result2 error) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = nil
	fake.updateReturns = struct {
		result1 *v1a.Service
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceInterface) UpdateReturnsOnCall(i int, result1 *v1a.Service, result2 error) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = nil
	if fake.updateReturnsOnCall == nil {
		fake.updateReturnsOnCall = make(map[int]struct {
			result1 *v1a.Service
			result2 error
		})
	}
	fake.updateReturnsOnCall[i] = struct {
		result1 *v1a.Service
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceInterface) UpdateStatus(arg1 context.Context, arg2 *v1a.Service, arg3 v1c.UpdateOptions) (*v1a.Service, error) {
	fake.updateStatusMutex.Lock()
	ret, specificReturn := fake.updateStatusReturnsOnCall[len(fake.updateStatusArgsForCall)]
	fake.updateStatusArgsForCall = append(fake.updateStatusArgsForCall, struct {
		arg1 context.Context
		arg2 *v1a.Service
		arg3 v1c.UpdateOptions
	}{arg1, arg2, arg3})
	stub := fake.UpdateStatusStub
	fakeReturns := fake.updateStatusReturns
	fake.recordInvocation("UpdateStatus", []interface{}{arg1, arg2, arg3})
	fake.updateStatusMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceInterface) UpdateStatusCallCount() int {
	fake.updateStatusMutex.RLock()
	defer fake.updateStatusMutex.RUnlock()
	return len(fake.updateStatusArgsForCall)
}

func (fake *FakeServiceInterface) UpdateStatusCalls(stub func(context.Context, *v1a.Service, v1c.UpdateOptions) (*v1a.Service, error)) {
	fake.updateStatusMutex.Lock()
	defer fake.updateStatusMutex.Unlock()
	fake.UpdateStatusStub = stub
}

func (fake *FakeServiceInterface) UpdateStatusArgsForCall(i int) (context.Context, *v1a.Service, v1c.UpdateOptions) {
	fake.updateStatusMutex.RLock()
	defer fake.updateStatusMutex.RUnlock()
	argsForCall := fake.updateStatusArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeServiceInterface) UpdateStatusReturns(result1 *v1a.Service, result2 error) {
	fake.updateStatusMutex.Lock()
	defer fake.updateStatusMutex.Unlock()
	fake.UpdateStatusStub = nil
	fake.updateStatusReturns = struct {
		result1 *v1a.Service
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceInterface) UpdateStatusReturnsOnCall(i int, result1 *v1a.Service, result2 error) {
	fake.updateStatusMutex.Lock()
	defer fake.updateStatusMutex.Unlock()
	fake.UpdateStatusStub = nil
	if fake.updateStatusReturnsOnCall == nil {
		fake.updateStatusReturnsOnCall = make(map[int]struct {
			result1 *v1a.Service
			result2 error
		})
	}
	fake.updateStatusReturnsOnCall[i] = struct {
		result1 *v1a.Service
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceInterface) Watch(arg1 context.Context, arg2 v1c.ListOptions) (watch.Interface, error) {
	fake.watchMutex.Lock()
	ret, specificReturn := fake.watchReturnsOnCall[len(fake.watchArgsForCall)]
	fake.watchArgsForCall = append(fake.watchArgsForCall, struct {
		arg1 context.Context
		arg2 v1c.ListOptions
	}{arg1, arg2})
	stub := fake.WatchStub
	fakeReturns := fake.watchReturns
	fake.recordInvocation("Watch", []interface{}{arg1, arg2})
	fake.watchMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceInterface) WatchCallCount() int {
	fake.watchMutex.RLock()
	defer fake.watchMutex.RUnlock()
	return len(fake.watchArgsForCall)
}

func (fake *FakeServiceInterface) WatchCalls(stub func(context.Context, v1c.ListOptions) (watch.Interface, error)) {
	fake.watchMutex.Lock()
	defer fake.watchMutex.Unlock()
	fake.WatchStub = stub
}

func (fake *FakeServiceInterface) WatchArgsForCall(i int) (context.Context, v1c.ListOptions) {
	fake.watchMutex.RLock()
	defer fake.watchMutex.RUnlock()
	argsForCall := fake.watchArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeServiceInterface) WatchReturns(result1 watch.Interface, result2 error) {
	fake.watchMutex.Lock()
	defer fake.watchMutex.Unlock()
	fake.WatchStub = nil
	fake.watchReturns = struct {
		result1 watch.Interface
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceInterface) WatchReturnsOnCall(i int, result1 watch.Interface, result2 error) {
	fake.watchMutex.Lock()
	defer fake.watchMutex.Unlock()
	fake.WatchStub = nil
	if fake.watchReturnsOnCall == nil {
		fake.watchReturnsOnCall = make(map[int]struct {
			result1 watch.Interface
			result2 error
		})
	}
	fake.watchReturnsOnCall[i] = struct {
		result1 watch.Interface
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceInterface) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.applyMutex.RLock()
	defer fake.applyMutex.RUnlock()
	fake.applyStatusMutex.RLock()
	defer fake.applyStatusMutex.RUnlock()
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	fake.patchMutex.RLock()
	defer fake.patchMutex.RUnlock()
	fake.proxyGetMutex.RLock()
	defer fake.proxyGetMutex.RUnlock()
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	fake.updateStatusMutex.RLock()
	defer fake.updateStatusMutex.RUnlock()
	fake.watchMutex.RLock()
	defer fake.watchMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeServiceInterface) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v1.ServiceInterface = new(FakeServiceInterface)
