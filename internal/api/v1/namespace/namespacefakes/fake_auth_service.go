// Code generated by counterfeiter. DO NOT EDIT.
package namespacefakes

import (
	"context"
	"sync"

	"github.com/epinio/epinio/internal/api/v1/namespace"
)

type FakeAuthService struct {
	AddNamespaceToUserStub        func(context.Context, string, string) error
	addNamespaceToUserMutex       sync.RWMutex
	addNamespaceToUserArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	addNamespaceToUserReturns struct {
		result1 error
	}
	addNamespaceToUserReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAuthService) AddNamespaceToUser(arg1 context.Context, arg2 string, arg3 string) error {
	fake.addNamespaceToUserMutex.Lock()
	ret, specificReturn := fake.addNamespaceToUserReturnsOnCall[len(fake.addNamespaceToUserArgsForCall)]
	fake.addNamespaceToUserArgsForCall = append(fake.addNamespaceToUserArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.AddNamespaceToUserStub
	fakeReturns := fake.addNamespaceToUserReturns
	fake.recordInvocation("AddNamespaceToUser", []interface{}{arg1, arg2, arg3})
	fake.addNamespaceToUserMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeAuthService) AddNamespaceToUserCallCount() int {
	fake.addNamespaceToUserMutex.RLock()
	defer fake.addNamespaceToUserMutex.RUnlock()
	return len(fake.addNamespaceToUserArgsForCall)
}

func (fake *FakeAuthService) AddNamespaceToUserCalls(stub func(context.Context, string, string) error) {
	fake.addNamespaceToUserMutex.Lock()
	defer fake.addNamespaceToUserMutex.Unlock()
	fake.AddNamespaceToUserStub = stub
}

func (fake *FakeAuthService) AddNamespaceToUserArgsForCall(i int) (context.Context, string, string) {
	fake.addNamespaceToUserMutex.RLock()
	defer fake.addNamespaceToUserMutex.RUnlock()
	argsForCall := fake.addNamespaceToUserArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeAuthService) AddNamespaceToUserReturns(result1 error) {
	fake.addNamespaceToUserMutex.Lock()
	defer fake.addNamespaceToUserMutex.Unlock()
	fake.AddNamespaceToUserStub = nil
	fake.addNamespaceToUserReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAuthService) AddNamespaceToUserReturnsOnCall(i int, result1 error) {
	fake.addNamespaceToUserMutex.Lock()
	defer fake.addNamespaceToUserMutex.Unlock()
	fake.AddNamespaceToUserStub = nil
	if fake.addNamespaceToUserReturnsOnCall == nil {
		fake.addNamespaceToUserReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.addNamespaceToUserReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeAuthService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addNamespaceToUserMutex.RLock()
	defer fake.addNamespaceToUserMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAuthService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ namespace.AuthService = new(FakeAuthService)
